@page "/fetchdata"
@using STLFusionSimpleSample.Shared
@using STLFusionSimpleSample.Shared.Services

@inject HttpClient Http
@inherits LiveComponentBase<WeatherForecastModel, WeatherForecastLocalsModel>
@inject IWeatherService weatherService

@{
    var locals = Locals.Value;
    var state = State.LastValue;
    var dataList = state.Forecast;
    var error = State.Error;

}

<h1>Weather forecast</h1>

<StatefulComponentState Component="@this" />

<p>This component demonstrates fetching data from the server. As soon as the data is invalid on the server, it is automatically updated.</p>

<div class="pb-4">
    <label>Selected country: @Country</label>
    <select class="form-control" @bind="Country">
        <option selected disabled value="-1">Please select a country</option>
        <option value="Germany"> Germany</option>
        <option value="USA"> USA</option>
        <option value="France"> France</option>
        <option value="England"> England</option>
        <option value="Japan"> Japan</option>
        <option value="India"> India</option>
    </select>
</div>

@if (dataList == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <label>Smooth <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox></label>
    <RadzenChart>
        <RadzenAreaSeries Smooth="@smooth" Data="@dataList" CategoryProperty="Date" Title="Temp in C" ValueProperty="TemperatureC" RenderingOrder="1">
        </RadzenAreaSeries>
        <RadzenAreaSeries Smooth="@smooth" Data="@dataList" CategoryProperty="Date" Title="Temp in F" ValueProperty="TemperatureF">
        </RadzenAreaSeries>

        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Forecast" />
        </RadzenValueAxis>
    </RadzenChart>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in dataList)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {

    bool smooth = true;

    private string country = string.Empty;
    private string Country
    {
        get
        {
            return country;
        }
        set
        {
            country = value;
            State.Invalidate();
        }
    }

    private bool HasError => Locals.Value.Error != null;

    protected override async Task<WeatherForecastModel> ComputeStateAsync(System.Threading.CancellationToken cancellationToken)
    {
        if (country != null && country != string.Empty)
        {
            var dataList = await weatherService.GetAsync(Country, cancellationToken);

            return new WeatherForecastModel()
            {
                Forecast = dataList,
            };
        }
        else
        {
            return new WeatherForecastModel()
            {
                Forecast = new WeatherForecast[] { }
            };
        }

    }
}