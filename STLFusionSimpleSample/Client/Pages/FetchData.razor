@page "/fetchdata"
@using STLFusionSimpleSample.Shared
@using STLFusionSimpleSample.Shared.Services

@inject HttpClient Http
@inherits LiveComponentBase<WeatherForecastModel, WeatherForecastLocalsModel>
@inject IWeatherService weatherService

@{
    var locals = Locals.Value;
    var state = State.LastValue;
    var dataList = state.Forecast;
    var error = State.Error;
}

<h1>Weather forecast</h1>

<StatefulComponentState Component="@this" />

<p>This component demonstrates fetching data from the server. As soon as the data is invalid on the server, it is automatically updated.</p>

@if (dataList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in dataList)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private bool HasError => Locals.Value.Error != null;

    protected override async Task<WeatherForecastModel> ComputeStateAsync(System.Threading.CancellationToken cancellationToken)
    {
        var dataList = await weatherService.GetAsync(cancellationToken);

        return new WeatherForecastModel()
        {
            Forecast = dataList,
        };

    }
}